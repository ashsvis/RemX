unit CalcDensUnit;

interface

function CalcDens(RealTemperature,PaspDensity: Double): Double;

implementation

uses Windows, Classes, Math, SysUtils;

const
  HDI = 238;
  ADens: array[0..HDI,0..2] of Double = (
(-25,1.041959956,-0.068192829),
(-24.5,1.041330367,-0.067290827),
(-24,1.040645161,-0.066311828),
(-23.5,1.040318131,-0.065672154),
(-23,1.039713014,-0.064787497),
(-22.5,1.039003337,-0.06381782),
(-22,1.038760845,-0.063216248),
(-21.5,1.038144605,-0.062325525),
(-21,1.037450501,-0.061365673),
(-20.5,1.037007786,-0.06060158),
(-20,1.036689655,-0.059976092),
(-19.5,1.035959956,-0.058972829),
(-19,1.035334816,-0.058074587),
(-18.5,1.034969967,-0.057379622),
(-18,1.034707453,-0.056751131),
(-17.5,1.033717464,-0.055591257),
(-17,1.033381535,-0.054924064),
(-16.5,1.032854283,-0.054095202),
(-16,1.032195773,-0.053178762),
(-15.5,1.031761958,-0.052428854),
(-15,1.031354839,-0.051714839),
(-14.5,1.030867631,-0.050933148),
(-14,1.030384872,-0.05014855),
(-13.5,1.02981535,-0.049307304),
(-13,1.029239155,-0.048437086),
(-12.5,1.028803115,-0.047695298),
(-12,1.028300334,-0.046910449),
(-11.5,1.027708565,-0.046030404),
(-11,1.027279199,-0.04529759),
(-10.5,1.027016685,-0.044695766),
(-10,1.026278087,-0.043718317),
(-9.5,1.025911012,-0.043044805),
(-9,1.025406007,-0.042241409),
(-8.5,1.024874305,-0.041428788),
(-8,1.024344828,-0.040614713),
(-7.5,1.023886541,-0.039860793),
(-7,1.02348832,-0.039154297),
(-6.5,1.022969967,-0.038352955),
(-6,1.022416018,-0.037514868),
(-5.5,1.022017798,-0.036815039),
(-5,1.021570634,-0.036073852),
(-4.5,1.021058954,-0.035274816),
(-4,1.020680756,-0.034581906),
(-3.5,1.019988877,-0.033653934),
(-3,1.019670745,-0.033008446),
(-2.5,1.019070078,-0.032127549),
(-2,1.018698554,-0.031463611),
(-1.5,1.018271413,-0.03073601),
(-1,1.017826474,-0.02999337),
(-0.5,1.017368187,-0.029246118),
(0,1.016847608,-0.028446229),
(0.5,1.016382647,-0.027683337),
(1,1.015906563,-0.026921046),
(1.5,1.015517241,-0.026242069),
(2,1.015085651,-0.025510708),
(2.5,1.014625139,-0.024764909),
(3,1.014124583,-0.023978606),
(3.5,1.013761958,-0.023308854),
(4,1.013254727,-0.022520245),
(4.5,1.012812013,-0.021782818),
(5,1.012226919,-0.020931746),
(5.5,1.011895439,-0.02029498),
(6,1.011568409,-0.019668639),
(6.5,1.010934372,-0.018776211),
(7,1.010500556,-0.01807297),
(7.5,1.010160178,-0.017402017),
(8,1.009839822,-0.016777983),
(8.5,1.009428254,-0.016073541),
(9,1.008961068,-0.015312102),
(9.5,1.008478309,-0.014560838),
(10,1.007946607,-0.013748217),
(10.5,1.007717464,-0.013211257),
(11,1.00734594,-0.012533986),
(11.5,1.006858732,-0.011765628),
(12,1.006400445,-0.011031709),
(12.5,1.005973304,-0.010324108),
(13,1.005552836,-0.009598813),
(13.5,1.005163515,-0.00891317),
(14,1.004836485,-0.00828683),
(14.5,1.004393771,-0.007569403),
(15,1.003870968,-0.006777634),
(15.5,1.003483871,-0.006097204),
(16,1.003239155,-0.005530419),
(16.5,1.002918799,-0.004913052),
(17,1.00243604,-0.004155121),
(17.5,1.001855395,-0.003314475),
(18,1.001412681,-0.002597049),
(18.5,1.00112792,-0.002009759),
(19,1.00094772,-0.00148749),
(19.5,1.000464961,-0.000729559),
(20,1,0),
(20.5,0.999535039,0.000729559),
(21,0.999085651,0.001455958),
(21.5,0.998858732,0.002014372),
(22,0.998587319,0.002597049),
(22.5,0.99814238,0.003313022),
(23,0.997726363,0.004001224),
(23.5,0.997276974,0.004727623),
(24,0.996858732,0.005427705),
(24.5,0.996585095,0.006008928),
(25,0.996258065,0.006635269),
(25.5,0.995957731,0.007232384),
(26,0.995481646,0.007981342),
(26.5,0.99516574,0.008581617),
(27,0.994760845,0.009270419),
(27.5,0.994231368,0.010071161),
(28,0.993977753,0.010625465),
(28.5,0.993899889,0.011061261),
(29,0.993252503,0.011918302),
(29.5,0.993010011,0.012459874),
(30,0.992631813,0.013132785),
(30.5,0.992291435,0.013757071),
(31,0.991911012,0.014415195),
(31.5,0.991581758,0.015040082),
(32,0.991185762,0.015708031),
(32.5,0.990865406,0.016318732),
(33,0.99051168,0.016967631),
(33.5,0.99014238,0.017613022),
(34,0.989797553,0.018254401),
(34.5,0.989506118,0.018830664),
(35,0.989096774,0.019523226),
(35.5,0.988885428,0.020031813),
(36,0.988542825,0.020661313),
(36.5,0.988126808,0.021349514),
(37,0.987739711,0.022016611),
(37.5,0.98753059,0.022526652),
(38,0.987132369,0.023193148),
(38.5,0.986778643,0.023842047),
(39,0.986498331,0.024412243),
(39.5,0.986120133,0.025065154),
(40,0.985888765,0.025593993),
(40.5,0.985548387,0.02621828),
(41,0.985210234,0.026837353),
(41.5,0.984938821,0.02740003),
(42,0.984756396,0.027887512),
(42.5,0.984342603,0.028570501),
(43,0.984084538,0.029121898),
(43.5,0.983666296,0.029815313),
(44,0.983359288,0.030394735),
(44.5,0.98301891,0.031019021),
(45,0.982736374,0.031601098),
(45.5,0.982400445,0.032214957),
(46,0.982066741,0.032830271),
(46.5,0.981846496,0.033339711),
(47,0.981521691,0.033940838),
(47.5,0.981159066,0.03459059),
(48,0.980954394,0.035083537),
(48.5,0.980607341,0.03571013),
(49,0.980229143,0.036369707),
(49.5,0.979959956,0.036920504),
(50,0.979733037,0.037432251),
(50.5,0.97952614,0.037937078),
(51,0.979130145,0.038605028),
(51.5,0.978823137,0.039191116),
(52,0.978533927,0.039755499),
(52.5,0.978302558,0.040297671),
(53,0.97828921,0.040628951),
(53.5,0.977904338,0.041277501),
(54,0.97760178,0.041859829),
(54.5,0.977261402,0.042477449),
(55,0.97705673,0.042970397),
(55.5,0.976789766,0.043522647),
(56,0.976518354,0.044071991),
(56.5,0.97614683,0.044715929),
(57,0.975955506,0.045197597),
(57.5,0.975659622,0.045784286),
(58,0.975441602,0.046281846),
(58.5,0.975092325,0.046913652),
(59,0.974914349,0.047377375),
(59.5,0.974645161,0.047921505),
(60,0.974384872,0.04847145),
(60.5,0.974117909,0.049017034),
(61.5,0.973555061,0.05014264),
(62,0.973365962,0.050619095),
(62.5,0.973076752,0.051190145),
(63,0.972856507,0.051692918),
(63.5,0.972527253,0.052291138),
(64,0.972413793,0.052697011),
(64.5,0.972024472,0.053355988),
(65,0.971813126,0.053851242),
(65.5,0.971561735,0.054387),
(66,0.971472747,0.054768862),
(66.5,0.971112347,0.055406733),
(67,0.970927697,0.055879429),
(67.5,0.970629588,0.056444664),
(68,0.970375973,0.056952303),
(68.5,0.970338154,0.057327594),
(69,0.970202447,0.057772265),
(69.5,0.96989099,0.058342113),
(70,0.969641824,0.058879325),
(71,0.969397108,0.059712777),
(71.5,0.969105673,0.060282373),
(72,0.968945495,0.060731057),
(72.5,0.968622914,0.061326971),
(73,0.968429366,0.061800519),
(73.5,0.968233593,0.062272614),
(74,0.96803782,0.062771376),
(74.5,0.967844271,0.063224924),
(75,0.967575083,0.063762388),
(75.5,0.962491657,0.068734549),
(76,0.961993326,0.069488973),
(76.5,0.961546162,0.070190159),
(77,0.961027809,0.070964835),
(77.5,0.960533927,0.071722165),
(78,0.960055617,0.072463003),
(78.5,0.959630701,0.073145391),
(79,0.959181313,0.073851791),
(79.5,0.958627364,0.074656544),
(80,0.958206897,0.075341839),
(80.5,0.957735261,0.076073704),
(81,0.957303671,0.076765065),
(81.5,0.956758621,0.077568966),
(82,0.956355951,0.078239221),
(82.5,0.955997775,0.078865213),
(83,0.955515017,0.079603144),
(83.5,0.954958843,0.080406444),
(84,0.954585095,0.081048928),
(84.5,0.954153504,0.081746956),
(85,0.953699666,0.082457115),
(85.5,0.953219132,0.0831965),
(86,0.95265406,0.084007319),
(86.5,0.95232703,0.08461366),
(87,0.951911012,0.085295195),
(87.5,0.951410456,0.086054831),
(88,0.950905451,0.086804894),
(88.5,0.950438265,0.087526333),
(89,0.950097887,0.088157286),
(89.5,0.94948832,0.088992369),
(90,0.949134594,0.089607935),
(90.5,0.948600667,0.090392436),
(91,0.948082314,0.091167112),
(91.5,0.947668521,0.0918501),
(92,0.947132369,0.092619815),
(92.5,0.946711902,0.093305109),
(93,0.946253615,0.094019029),
(93.5,0.94574416,0.094786185),
(94,0.945301446,0.095476945),
(94.5,0.944885428,0.09615848),
(95,0.944375973,0.096918969));
var
  DensTable: array[0..HDI,0..30] of Double;

function CalcDensExtra(RealTemperature,PaspDensity: Double): Double;
var i,min,max: integer; a,b,rt: Double;
begin
  if InRange(RealTemperature,-25.0,95.0) then
  begin
    try
      rt:=RoundTo(RealTemperature,-1);
    except
      rt:=RealTemperature;
    end;
    try
      rt:=RoundTo(rt*20,1)/20; // округление до 0.5
    except
      rt:=rt;
    end;
    min:=0; max:=HDI;
    i:=HDI div 2;
    repeat
      if rt < ADens[i,0] then
        max:=i
      else
        min:=i;
      i:=min+(max-min) div 2;
    until (max-min) <= 1;
    a:=ADens[i,1]; b:=ADens[i,2];
    try
      Result:=RoundTo(a*PaspDensity+b,-4);
    except
      Result:=a*PaspDensity+b;
    end;
  end
  else
    Result:=PaspDensity;
end;

function CalcDens(RealTemperature,PaspDensity: Double): Double;
var i,j,rt0,rt1,pd0,pd1: integer; rt,pd,p,q,f00,f01,f10,f11: Double;
begin
  if InRange(RealTemperature,-25.0,95.0) and
     InRange(PaspDensity,0.7,0.99) then
  begin
    rt:=RealTemperature;
//    rt:=RoundTo(RealTemperature,-1);
//    rt:=RoundTo(rt*20,1)/20; // округление до 0.5
    rt0:=0; rt1:=HDI;
    i:=rt1 div 2;
    repeat
      if rt < DensTable[i,0] then
        rt1:=i
      else
        rt0:=i;
      i:=rt0+(rt1-rt0) div 2;
    until (rt1-rt0) <= 1;
    q:=(rt-DensTable[rt0,0])/0.5;
//    if Abs(DensTable[rt0,0]-rt) < Abs(DensTable[rt1,0]-rt) then
//      i:=rt0
//    else
//      i:=rt1;
    pd:=PaspDensity;
//    pd:=RoundTo(PaspDensity,-2);
    pd0:=1; pd1:=30;
    j:=pd1 div 2;
    repeat
      if pd < DensTable[90,j] then
        pd1:=j
      else
        pd0:=j;
      j:=pd0+(pd1-pd0) div 2;
    until (pd1-pd0) <= 1;
    p:=(pd-DensTable[90,pd0])/0.01;
//    if Abs(DensTable[90,pd0]-pd) < Abs(DensTable[90,pd1]-pd) then
//      j:=pd0
//    else
//      j:=pd1;
    f00:=DensTable[rt0,pd0];
    f01:=DensTable[rt1,pd0];
    f10:=DensTable[rt0,pd1];
    f11:=DensTable[rt1,pd1];
    try
      Result:=RoundTo((1-p)*(1-q)*f00+p*(1-q)*f10+q*(1-p)*f01+p*q*f11,-4);
    except
      Result:=(1-p)*(1-q)*f00+p*(1-q)*f10+q*(1-p)*f01+p*q*f11;
    end;
  end
  else
    Result:=CalcDensExtra(RealTemperature,PaspDensity);
end;

procedure LoadDensTable;
var RF: TResourceStream; Ch: AnsiChar; sBuf: string; i,j: integer; n: Double;
begin
// При i=90 t=20°C и значения плотностей паспортные
  RF:=TResourceStream.Create(hInstance,'DensTable',RT_RCDATA);
  try
    sBuf:=''; i:=0; j:=0;
    while RF.Position < RF.Size do
    begin
      RF.Read(Ch,1);
      if Ch = ';' then
      begin
        if j=0 then
          n:=StrToInt(sBuf)/10.0
        else
          n:=StrToInt(sBuf)/10000.0;
        DensTable[i,j]:=n;
        sBuf:='';
        Inc(j);
      end
      else
      if Ch = #13 then
      begin
        j:=0;
        Inc(i);
      end
      else
      if Ch in ['0'..'9','-'] then
        sBuf:=sBuf+Ch;
    end;
  finally
    RF.Free;
  end;
end;

initialization
  LoadDensTable;

end.
